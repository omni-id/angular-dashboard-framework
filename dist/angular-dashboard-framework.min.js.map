{"version":3,"sources":["adf.module.js","services/widget.service.js","services/adf-utils.service.js","services/adf-structure-preview.service.js","services/adf-dashboard.service.js","filters/adf-order-by-object-key.filter.js","directives/adf-widget.directive.js","angular-dashboard-framework.min.js","directives/adf-widget-content.directive.js","directives/adf-structure-preview.directive.js","directives/adf-dashboard.directive.js","directives/adf-dashboard-row.directive.js","directives/adf-dashboard-column.directive.js","dashboard.provider.js","adf.locale.constants.js"],"names":["window","undefined","angular","module","value","factory","$http","$q","$sce","$templateCache","dashboard","parseUrl","url","parsedUrl","indexOf","replace","widgetsPath","substring","exposed","getTemplate","widget","deferred","defer","template","resolve","templateUrl","tpl","get","getTrustedResourceUrl","then","response","data","put","reject","promise","stringToBoolean","string","isString","toLowerCase","Boolean","split","object","size","arr","i","forEach","key","index","service","adjustRowHeight","container","rows","length","height","row","style","columns","column","$log","$rootScope","_copyWidgets","source","target","widgets","w","shift","push","_fillStructure","root","counter","isDefined","isUndefined","_readColumns","col","hasOwnProperty","changeStructure","model","structure","copy","createConfiguration","type","cfg","config","_findFirstWidgetColumn","isArray","error","j","addNewWidgetToModel","name","unshift","$broadcast","isEditModeImmediate","edit","immediate","createCategories","categories","category","_tests","filter","$filter","item","array","objectKey","directive","$injector","$uibModal","adfTemplatePath","preLink","$scope","definition","translate","title","titleTemplateUrl","editTemplateUrl","frameless","styleClass","wid","id","fromJson","widgetState","isCollapsed","collapsed","warn","debug","postLink","$element","deleteWidget","splice","remove","options","enableConfirmDelete","deleteScope","$new","deleteTemplateUrl","opts","scope","windowClass","backdrop","instance","open","closeDialog","close","$destroy","deleteDialog","reload","createApplyPromise","result","when","editScope","adfEditTemplatePath","saveDialog","validationError","applyFn","apply","locals","invoke","extend","err","controller","$on","event","args","collapseExpandStatus","idEquals","widgetClasses","classes","editMode","openFullScreen","fullScreenScope","modalSize","$inject","restrict","transclude","customWidgetTemplatePath","adfModel","compile","pre","post","widgetService","$compile","$controller","renderError","msg","html","messageTemplate","compileWidget","currentScope","content","newScope","renderWidget","loadingTemplate","templateScope","base","resolvers","$tpl","all","resolveAs","templateCtrl","controllerAs","children","contents","reason","link","e","adfStructurePreviewService","preview","selected","$timeout","adfDashboardService","adfUtilsService","_openEditMode","getNewModalScope","widgetFilter","structureName","$watch","oldVal","newVal","adfWidgetFilter","structures","editClass","toggleEditMode","continuousEditMode","modelCopy","collapseAll","cancelEditMode","editDashboardDialog","editDashboardScope","info","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","addWidget","$attr","editable","maximizable","collapsible","columnTemplate","cloned","append","rowTemplate","moveWidgetInColumn","evt","$apply","newIndex","oldIndex","findWidget","findColumn","r","c","cid","getId","el","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","removeWidgetFromColumn","applySortable","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","defaultApplyFunction","defaultLocale","frameworkLocales","this","path","templatePath","setLocale","locale","Error","addLocale","translations","isObject","$get","Date","getTime","other","toString","constant","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .then(function(response) {\r\n                 return response.data;\r\n               })\r\n               .then(function(data) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, data);\r\n                 deferred.resolve(data);\r\n               })\r\n               .catch(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfUtilsService', function () {\r\n    'use strict';\r\n\r\n    var service = {\r\n      stringToBoolean: stringToBoolean,\r\n      split: split\r\n    };\r\n    return service;\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isString(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfStructurePreviewService', function () {\r\n    'use strict';\r\n\r\n    var service = {\r\n      adjustRowHeight: adjustRowHeight\r\n    };\r\n    return service;\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfDashboardService', function ($log, dashboard, $rootScope) {\r\n    'use strict';\r\n\r\n    var service = {\r\n      changeStructure: changeStructure,\r\n      createConfiguration: createConfiguration,\r\n      addNewWidgetToModel: addNewWidgetToModel,\r\n      isEditModeImmediate: isEditModeImmediate,\r\n      createCategories: createCategories,\r\n\r\n      // expose internal functions for testing purposes\r\n      // TODO find a nicer way\r\n      _tests: {\r\n        _readColumns: _readColumns\r\n      }\r\n    };\r\n    return service;\r\n\r\n    function _copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function _fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                _copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = _fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function _readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            if (!col.hasOwnProperty('rows')) {\r\n              columns.push(col);\r\n            }\r\n            // keep reading columns until we can't any more\r\n            _readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = _readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = _fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function _findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = _findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget, key){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (angular.isUndefined(categories[category])){\r\n          categories[category] = {widgets: {}};\r\n        }\r\n        categories[category].widgets[key] = widget;\r\n      });\r\n      return categories;\r\n    }\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        adfModel: '=',\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: controller,\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              windowClass: 'adf-remove-widget-modal',\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            windowClass: 'adf-edit-widget-modal',\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                // Added the argument to this broadcast because this definition has\r\n                // the very latest config values\r\n                $scope.$broadcast('widgetConfigChanged', definition.config);\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    function controller($scope){\r\n\r\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n      });\r\n\r\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n          $scope.edit();\r\n        }\r\n      });\r\n\r\n      $scope.widgetClasses = function(w, definition){\r\n        var classes = definition.styleClass || '';\r\n        // w is undefined, if the type of the widget is unknown\r\n        // see issue #216\r\n        if (!w || !w.frameless || $scope.editMode){\r\n          classes += ' panel panel-default';\r\n        }\r\n        return classes;\r\n      };\r\n\r\n      $scope.openFullScreen = function() {\r\n        var definition = $scope.definition;\r\n        var fullScreenScope = $scope.$new();\r\n        var opts = {\r\n          scope: fullScreenScope,\r\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n          backdrop: 'static',\r\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n        };\r\n\r\n        var instance = $uibModal.open(opts);\r\n        fullScreenScope.closeDialog = function() {\r\n          instance.close();\r\n          fullScreenScope.$destroy();\r\n        };\r\n      };\r\n    }\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.13.0-SNAPSHOT');\r\n\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .then(function(response) {\r\n                 return response.data;\r\n               })\r\n               .then(function(data) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, data);\r\n                 deferred.resolve(data);\r\n               })\r\n               .catch(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfUtilsService', function () {\r\n    \r\n\r\n    var service = {\r\n      stringToBoolean: stringToBoolean,\r\n      split: split\r\n    };\r\n    return service;\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isString(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfStructurePreviewService', function () {\r\n    \r\n\r\n    var service = {\r\n      adjustRowHeight: adjustRowHeight\r\n    };\r\n    return service;\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\nangular.module('adf')\r\n  .factory('adfDashboardService', [\"$log\", \"dashboard\", \"$rootScope\", function ($log, dashboard, $rootScope) {\r\n    \r\n\r\n    var service = {\r\n      changeStructure: changeStructure,\r\n      createConfiguration: createConfiguration,\r\n      addNewWidgetToModel: addNewWidgetToModel,\r\n      isEditModeImmediate: isEditModeImmediate,\r\n      createCategories: createCategories,\r\n\r\n      // expose internal functions for testing purposes\r\n      // TODO find a nicer way\r\n      _tests: {\r\n        _readColumns: _readColumns\r\n      }\r\n    };\r\n    return service;\r\n\r\n    function _copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function _fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                _copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = _fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function _readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            if (!col.hasOwnProperty('rows')) {\r\n              columns.push(col);\r\n            }\r\n            // keep reading columns until we can't any more\r\n            _readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = _readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = _fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function _findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = _findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget, key){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (angular.isUndefined(categories[category])){\r\n          categories[category] = {widgets: {}};\r\n        }\r\n        categories[category].widgets[key] = widget;\r\n      });\r\n      return categories;\r\n    }\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        adfModel: '=',\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: controller,\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn', definition);\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              windowClass: 'adf-remove-widget-modal',\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            windowClass: 'adf-edit-widget-modal',\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                // Added the argument to this broadcast because this definition has\r\n                // the very latest config values\r\n                $scope.$broadcast('widgetConfigChanged', definition.config);\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    function controller($scope){\r\n\r\n      $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n        $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n      });\r\n\r\n      $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n        if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n          $scope.edit();\r\n        }\r\n      });\r\n\r\n      $scope.widgetClasses = function(w, definition){\r\n        var classes = definition.styleClass || '';\r\n        // w is undefined, if the type of the widget is unknown\r\n        // see issue #216\r\n        if (!w || !w.frameless || $scope.editMode){\r\n          classes += ' panel panel-default';\r\n        }\r\n        return classes;\r\n      };\r\n\r\n      $scope.openFullScreen = function() {\r\n        var definition = $scope.definition;\r\n        var fullScreenScope = $scope.$new();\r\n        var opts = {\r\n          scope: fullScreenScope,\r\n          templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n          size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n          backdrop: 'static',\r\n          windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n        };\r\n\r\n        var instance = $uibModal.open(opts);\r\n        fullScreenScope.closeDialog = function() {\r\n          instance.close();\r\n          fullScreenScope.$destroy();\r\n        };\r\n      };\r\n    }\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        adfModel: '=',\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: link\r\n    };\r\n\r\n    function renderError($element, msg){\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      var newScope = currentScope;\r\n      if (!model){\r\n        renderError($element, 'model is undefined')\r\n      } else if (!content){\r\n        var msg = 'widget content is undefined, please have a look at your browser log';\r\n        renderError($element, msg);\r\n      } else {\r\n        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n      }\r\n      return newScope;\r\n    }\r\n\r\n    function renderWidget($scope, $element, currentScope, model, content) {\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        renderError($element, msg);\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    function link($scope, $element) {\r\n      var currentScope = compileWidget($scope, $element, null);\r\n      $scope.$on('widgetConfigChanged', function(e, config) {\r\n        if(config && typeof config !== 'undefined'){\r\n          // This makes sure the scopes widget config value gets\r\n          // updated with the very latest (just saved) values\r\n          $scope.model.config = config;\r\n        }        \r\n        currentScope = compileWidget($scope, $element, currentScope);\r\n      });\r\n      $scope.$on('widgetReload', function() {\r\n        currentScope = compileWidget($scope, $element, currentScope);\r\n      });\r\n    }\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", \"adfStructurePreviewService\", function(adfTemplatePath, adfStructurePreviewService) {\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: link\r\n    };\r\n\r\n    function link($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adfStructurePreviewService.adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", \"adfDashboardService\", \"adfUtilsService\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\r\n    \r\n\n    controller.$inject = [\"$scope\"];\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: controller,\r\n      link: link,\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function _openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Directive controller function.\r\n     *\r\n     * @param dashboard scope\r\n     */\r\n    function controller($scope){\r\n      var model = {};\r\n      var structure = {};\r\n      var widgetFilter = null;\r\n      var structureName = {};\r\n      var name = $scope.name;\r\n\r\n      // Watching for changes on adfModel\r\n      $scope.$watch('adfModel', function(oldVal, newVal) {\r\n       // has model changed or is the model attribute not set\r\n       if (newVal !== null || (oldVal === null && newVal === null)) {\r\n         model = $scope.adfModel;\r\n         widgetFilter = $scope.adfWidgetFilter;\r\n         if ( ! model || ! model.rows ){\r\n           structureName = $scope.structure;\r\n           structure = dashboard.structures[structureName];\r\n           if (structure){\r\n             if (model){\r\n               model.rows = angular.copy(structure).rows;\r\n             } else {\r\n               model = angular.copy(structure);\r\n             }\r\n             model.structure = structureName;\r\n           } else {\r\n             $log.error( 'could not find structure ' + structureName);\r\n           }\r\n         }\r\n\r\n         if (model) {\r\n           if (!model.title){\r\n             model.title = 'Dashboard';\r\n           }\r\n           if (!model.titleTemplateUrl) {\r\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n           }\r\n           $scope.model = model;\r\n         } else {\r\n           $log.error('could not find or create model');\r\n         }\r\n       }\r\n      }, true);\r\n\r\n      // edit mode\r\n      $scope.editMode = false;\r\n      $scope.editClass = '';\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      function getNewModalScope() {\r\n       var scope = $scope.$new();\r\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n       scope.translate = dashboard.translate;\r\n       return scope;\r\n      }\r\n\r\n      $scope.toggleEditMode = function(){\r\n       $scope.editMode = ! $scope.editMode;\r\n       if ($scope.editMode){\r\n         if (!$scope.continuousEditMode) {\r\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n           $rootScope.$broadcast('adfIsEditMode');\r\n         }\r\n       }\r\n\r\n       if (!$scope.editMode){\r\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n       }\r\n      };\r\n\r\n      $scope.$on('adfToggleEditMode', function() {\r\n         $scope.toggleEditMode();\r\n      });\r\n\r\n      $scope.collapseAll = function(collapseExpandStatus){\r\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n      };\r\n\r\n      $scope.cancelEditMode = function(){\r\n       $scope.editMode = false;\r\n       if (!$scope.continuousEditMode) {\r\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n       }\r\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n      };\r\n\r\n      // edit dashboard settings\r\n      $scope.editDashboardDialog = function(){\r\n       var editDashboardScope = getNewModalScope();\r\n       // create a copy of the title, to avoid changing the title to\r\n       // \"dashboard\" if the field is empty\r\n       editDashboardScope.copy = {\r\n         title: model.title\r\n       };\r\n\r\n       // pass dashboard structure to scope\r\n       editDashboardScope.structures = dashboard.structures;\r\n\r\n       // pass split function to scope, to be able to display structures in multiple columns\r\n       editDashboardScope.split = adfUtilsService.split;\r\n\r\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n       if(model.editTemplateUrl) {\r\n         adfEditTemplatePath = model.editTemplateUrl;\r\n       }\r\n       var instance = $uibModal.open({\r\n         scope: editDashboardScope,\r\n         templateUrl: adfEditTemplatePath,\r\n         backdrop: 'static',\r\n         windowClass: 'adf-edit-dashboard-modal',\r\n         size: 'lg'\r\n       });\r\n       editDashboardScope.changeStructure = function(name, structure){\r\n         $log.info('change structure to ' + name);\r\n         adfDashboardService.changeStructure(model, structure);\r\n         if (model.structure !== name){\r\n           model.structure = name;\r\n         }\r\n       };\r\n       editDashboardScope.closeDialog = function(){\r\n         // copy the new title back to the model\r\n         model.title = editDashboardScope.copy.title;\r\n         // close modal and destroy the scope\r\n         instance.close();\r\n         editDashboardScope.$destroy();\r\n       };\r\n      };\r\n\r\n      // add widget dialog\r\n      $scope.addWidgetDialog = function(){\r\n       var addScope = getNewModalScope();\r\n       var model = $scope.model;\r\n       var widgets;\r\n       if (angular.isFunction(widgetFilter)){\r\n         widgets = {};\r\n         angular.forEach(dashboard.widgets, function(widget, type){\r\n           if (widgetFilter(widget, type, model)){\r\n             widgets[type] = widget;\r\n           }\r\n         });\r\n       } else {\r\n         widgets = dashboard.widgets;\r\n       }\r\n       addScope.widgets = widgets;\r\n\r\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n       addScope.translate = $scope.translate;\r\n\r\n       // pass createCategories function to scope, if categories option is enabled\r\n       if ($scope.options.categories){\r\n         $scope.createCategories = adfDashboardService.createCategories;\r\n       }\r\n\r\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n       if(model.addTemplateUrl) {\r\n         adfAddTemplatePath = model.addTemplateUrl;\r\n       }\r\n\r\n       var opts = {\r\n         scope: addScope,\r\n         templateUrl: adfAddTemplatePath,\r\n         windowClass: 'adf-add-widget-modal',\r\n         backdrop: 'static'\r\n       };\r\n\r\n       var instance = $uibModal.open(opts);\r\n       addScope.addWidget = function(widget){\r\n         var w = {\r\n           type: widget,\r\n           config: adfDashboardService.createConfiguration(widget)\r\n         };\r\n         adfDashboardService.addNewWidgetToModel(model, w, name);\r\n         // close and destroy\r\n         instance.close();\r\n         addScope.$destroy();\r\n\r\n         // check for open edit mode immediately\r\n         if (adfDashboardService.isEditModeImmediate(widget)){\r\n           _openEditMode($scope, w);\r\n         }\r\n       };\r\n       addScope.closeDialog = function(){\r\n         // close and destroy\r\n         instance.close();\r\n         addScope.$destroy();\r\n       };\r\n      };\r\n\r\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\r\n    }\r\n\r\n    /**\r\n     * Directive link function.\r\n     *\r\n     * @param dashboard scope\r\n     * @param directive DOM element\r\n     * @param directive attributes\r\n     */\r\n    function link($scope, $element, $attr) {\r\n      // pass options to scope\r\n      var options = {\r\n        name: $attr.name,\r\n        editable: true,\r\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\r\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\r\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\r\n        categories: adfUtilsService.stringToBoolean($attr.categories)\r\n      };\r\n      if (angular.isDefined($attr.editable)){\r\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\r\n      }\r\n      $scope.options = options;\r\n    }\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: link\r\n    };\r\n\r\n    function link($scope, $element) {\r\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n        $compile(columnTemplate)($scope, function(cloned) {\r\n          $element.append(cloned);\r\n        });\r\n      }\r\n    }\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: link\r\n    };\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    function link($scope, $element) {\r\n      // set id\r\n      var col = $scope.column;\r\n      if (!col.cid){\r\n        col.cid = dashboard.id();\r\n      }\r\n\r\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n        $compile(rowTemplate)($scope, function(cloned) {\r\n          $element.append(cloned);\r\n        });\r\n      } else {\r\n        // enable drag and drop for widget only columns\r\n        applySortable($scope, $element, $scope.adfModel, col);\r\n      }\r\n    }\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\n})(window);","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, widgetService, $compile, $controller, $injector, dashboard) {\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        adfModel: '=',\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: link\r\n    };\r\n\r\n    function renderError($element, msg){\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      var newScope = currentScope;\r\n      if (!model){\r\n        renderError($element, 'model is undefined')\r\n      } else if (!content){\r\n        var msg = 'widget content is undefined, please have a look at your browser log';\r\n        renderError($element, msg);\r\n      } else {\r\n        newScope = renderWidget($scope, $element, currentScope, model, content);\r\n      }\r\n      return newScope;\r\n    }\r\n\r\n    function renderWidget($scope, $element, currentScope, model, content) {\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        renderError($element, msg);\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    function link($scope, $element) {\r\n      var currentScope = compileWidget($scope, $element, null);\r\n      $scope.$on('widgetConfigChanged', function(e, config) {\r\n        if(config && typeof config !== 'undefined'){\r\n          // This makes sure the scopes widget config value gets\r\n          // updated with the very latest (just saved) values\r\n          $scope.model.config = config;\r\n        }        \r\n        currentScope = compileWidget($scope, $element, currentScope);\r\n      });\r\n      $scope.$on('widgetReload', function() {\r\n        currentScope = compileWidget($scope, $element, currentScope);\r\n      });\r\n    }\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath, adfStructurePreviewService) {\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: link\r\n    };\r\n\r\n    function link($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adfStructurePreviewService.adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath, adfDashboardService, adfUtilsService) {\r\n    'use strict';\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: controller,\r\n      link: link,\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function _openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Directive controller function.\r\n     *\r\n     * @param dashboard scope\r\n     */\r\n    function controller($scope){\r\n      var model = {};\r\n      var structure = {};\r\n      var widgetFilter = null;\r\n      var structureName = {};\r\n      var name = $scope.name;\r\n\r\n      // Watching for changes on adfModel\r\n      $scope.$watch('adfModel', function(oldVal, newVal) {\r\n       // has model changed or is the model attribute not set\r\n       if (newVal !== null || (oldVal === null && newVal === null)) {\r\n         model = $scope.adfModel;\r\n         widgetFilter = $scope.adfWidgetFilter;\r\n         if ( ! model || ! model.rows ){\r\n           structureName = $scope.structure;\r\n           structure = dashboard.structures[structureName];\r\n           if (structure){\r\n             if (model){\r\n               model.rows = angular.copy(structure).rows;\r\n             } else {\r\n               model = angular.copy(structure);\r\n             }\r\n             model.structure = structureName;\r\n           } else {\r\n             $log.error( 'could not find structure ' + structureName);\r\n           }\r\n         }\r\n\r\n         if (model) {\r\n           if (!model.title){\r\n             model.title = 'Dashboard';\r\n           }\r\n           if (!model.titleTemplateUrl) {\r\n             model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n           }\r\n           $scope.model = model;\r\n         } else {\r\n           $log.error('could not find or create model');\r\n         }\r\n       }\r\n      }, true);\r\n\r\n      // edit mode\r\n      $scope.editMode = false;\r\n      $scope.editClass = '';\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      function getNewModalScope() {\r\n       var scope = $scope.$new();\r\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n       scope.translate = dashboard.translate;\r\n       return scope;\r\n      }\r\n\r\n      $scope.toggleEditMode = function(){\r\n       $scope.editMode = ! $scope.editMode;\r\n       if ($scope.editMode){\r\n         if (!$scope.continuousEditMode) {\r\n           $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n           $rootScope.$broadcast('adfIsEditMode');\r\n         }\r\n       }\r\n\r\n       if (!$scope.editMode){\r\n         $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n       }\r\n      };\r\n\r\n      $scope.$on('adfToggleEditMode', function() {\r\n         $scope.toggleEditMode();\r\n      });\r\n\r\n      $scope.collapseAll = function(collapseExpandStatus){\r\n       $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n      };\r\n\r\n      $scope.cancelEditMode = function(){\r\n       $scope.editMode = false;\r\n       if (!$scope.continuousEditMode) {\r\n         $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n       }\r\n       $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n      };\r\n\r\n      // edit dashboard settings\r\n      $scope.editDashboardDialog = function(){\r\n       var editDashboardScope = getNewModalScope();\r\n       // create a copy of the title, to avoid changing the title to\r\n       // \"dashboard\" if the field is empty\r\n       editDashboardScope.copy = {\r\n         title: model.title\r\n       };\r\n\r\n       // pass dashboard structure to scope\r\n       editDashboardScope.structures = dashboard.structures;\r\n\r\n       // pass split function to scope, to be able to display structures in multiple columns\r\n       editDashboardScope.split = adfUtilsService.split;\r\n\r\n       var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n       if(model.editTemplateUrl) {\r\n         adfEditTemplatePath = model.editTemplateUrl;\r\n       }\r\n       var instance = $uibModal.open({\r\n         scope: editDashboardScope,\r\n         templateUrl: adfEditTemplatePath,\r\n         backdrop: 'static',\r\n         windowClass: 'adf-edit-dashboard-modal',\r\n         size: 'lg'\r\n       });\r\n       editDashboardScope.changeStructure = function(name, structure){\r\n         $log.info('change structure to ' + name);\r\n         adfDashboardService.changeStructure(model, structure);\r\n         if (model.structure !== name){\r\n           model.structure = name;\r\n         }\r\n       };\r\n       editDashboardScope.closeDialog = function(){\r\n         // copy the new title back to the model\r\n         model.title = editDashboardScope.copy.title;\r\n         // close modal and destroy the scope\r\n         instance.close();\r\n         editDashboardScope.$destroy();\r\n       };\r\n      };\r\n\r\n      // add widget dialog\r\n      $scope.addWidgetDialog = function(){\r\n       var addScope = getNewModalScope();\r\n       var model = $scope.model;\r\n       var widgets;\r\n       if (angular.isFunction(widgetFilter)){\r\n         widgets = {};\r\n         angular.forEach(dashboard.widgets, function(widget, type){\r\n           if (widgetFilter(widget, type, model)){\r\n             widgets[type] = widget;\r\n           }\r\n         });\r\n       } else {\r\n         widgets = dashboard.widgets;\r\n       }\r\n       addScope.widgets = widgets;\r\n\r\n       //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n       addScope.translate = $scope.translate;\r\n\r\n       // pass createCategories function to scope, if categories option is enabled\r\n       if ($scope.options.categories){\r\n         $scope.createCategories = adfDashboardService.createCategories;\r\n       }\r\n\r\n       var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n       if(model.addTemplateUrl) {\r\n         adfAddTemplatePath = model.addTemplateUrl;\r\n       }\r\n\r\n       var opts = {\r\n         scope: addScope,\r\n         templateUrl: adfAddTemplatePath,\r\n         windowClass: 'adf-add-widget-modal',\r\n         backdrop: 'static'\r\n       };\r\n\r\n       var instance = $uibModal.open(opts);\r\n       addScope.addWidget = function(widget){\r\n         var w = {\r\n           type: widget,\r\n           config: adfDashboardService.createConfiguration(widget)\r\n         };\r\n         adfDashboardService.addNewWidgetToModel(model, w, name);\r\n         // close and destroy\r\n         instance.close();\r\n         addScope.$destroy();\r\n\r\n         // check for open edit mode immediately\r\n         if (adfDashboardService.isEditModeImmediate(widget)){\r\n           _openEditMode($scope, w);\r\n         }\r\n       };\r\n       addScope.closeDialog = function(){\r\n         // close and destroy\r\n         instance.close();\r\n         addScope.$destroy();\r\n       };\r\n      };\r\n\r\n      $scope.addNewWidgetToModel = adfDashboardService.addNewWidgetToModel;\r\n    }\r\n\r\n    /**\r\n     * Directive link function.\r\n     *\r\n     * @param dashboard scope\r\n     * @param directive DOM element\r\n     * @param directive attributes\r\n     */\r\n    function link($scope, $element, $attr) {\r\n      // pass options to scope\r\n      var options = {\r\n        name: $attr.name,\r\n        editable: true,\r\n        enableConfirmDelete: adfUtilsService.stringToBoolean($attr.enableConfirmDelete),\r\n        maximizable: adfUtilsService.stringToBoolean($attr.maximizable),\r\n        collapsible: adfUtilsService.stringToBoolean($attr.collapsible),\r\n        categories: adfUtilsService.stringToBoolean($attr.categories)\r\n      };\r\n      if (angular.isDefined($attr.editable)){\r\n        options.editable = adfUtilsService.stringToBoolean($attr.editable);\r\n      }\r\n      $scope.options = options;\r\n    }\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: link\r\n    };\r\n\r\n    function link($scope, $element) {\r\n      if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n        $compile(columnTemplate)($scope, function(cloned) {\r\n          $element.append(cloned);\r\n        });\r\n      }\r\n    }\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: link\r\n    };\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    function link($scope, $element) {\r\n      // set id\r\n      var col = $scope.column;\r\n      if (!col.cid){\r\n        col.cid = dashboard.id();\r\n      }\r\n\r\n      if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n        // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n        $compile(rowTemplate)($scope, function(cloned) {\r\n          $element.append(cloned);\r\n        });\r\n      } else {\r\n        // enable drag and drop for widget only columns\r\n        applySortable($scope, $element, $scope.adfModel, col);\r\n      }\r\n    }\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n'use strict';\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n"]}